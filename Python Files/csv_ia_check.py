# -*- coding: utf-8 -*-
"""CSV IA Check.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tWIKFkt2nFOynNrkJk2B3bB8wiXANZNt
"""

from google.colab import drive
drive.mount('/content/gdrive/', force_remount=True)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def calculate_ia(L, R):
    """Calculate Index of Asymmetry (IA)"""
    return abs((L - R) / max(L, R)) * 100

def analyze_asymmetry(data):
    # Extract relevant columns for left and right controllers
    left_position_cols = ['LeftPosX', 'LeftPosY', 'LeftPosZ']
    right_position_cols = ['RightPosX', 'RightPosY', 'RightPosZ']

    # Initialize lists to store IA values for each type of measurement
    ia_positions = []

    # Ensure we calculate IA values over time and align lengths
    for index, row in data.iterrows():
        # Calculate IA for positions
        ia_pos_row = [calculate_ia(row[left_col], row[right_col])
                      for left_col, right_col in zip(left_position_cols, right_position_cols)]
        ia_positions.append(np.mean(ia_pos_row))  # Average across dimensions for each row

    # Store IA values over time in a dictionary
    asymmetry_results = {
        'ia_positions': ia_positions
    }

    return asymmetry_results

def determine_if_results_are_ok(asymmetry_results, healthy_thresholds):
    """Check if the asymmetry results exceed predefined thresholds from the healthy data."""
    # Calculate the average IA over time
    avg_ia_position = np.mean(asymmetry_results['ia_positions'])

    print(f"Average IA for Positions: {avg_ia_position}")

    # Check if the results are okay
    if avg_ia_position <= healthy_thresholds['position_threshold']:
        print("Position IA below/equal the threshold.")
    else:
        print("Position IA exceeds threshold.")

def calculate_healthy_threshold(healthy_data):
    """Calculate the thresholds from the healthy CSV file."""
    # Analyze asymmetry in the healthy data
    healthy_asymmetry = analyze_asymmetry(healthy_data)

    # Set thresholds based on healthy data (average IA values)
    position_threshold = np.mean(healthy_asymmetry['ia_positions'])

    return {
        'position_threshold': position_threshold
    }

def plot_asymmetry_over_time(test_data, healthy_thresholds):
    """Plot the asymmetry values over time for test data and compare against healthy thresholds."""
    # Analyze asymmetry to get the time series of IA values for the test data
    asymmetry_results = analyze_asymmetry(test_data)

    # Plotting
    plt.figure(figsize=(10, 6))

    # Plot positions IA over time
    plt.plot(test_data['Timestamp'], asymmetry_results['ia_positions'], label='Position IA', color='blue')

    # Add a red horizontal line for the threshold
    plt.axhline(y=healthy_thresholds['position_threshold'], color='red', linestyle='--', label='Threshold')

    plt.xlabel('Time (s)')
    plt.ylabel('Index of Asymmetry (IA)')
    plt.title('Asymmetry Over Time')
    plt.legend()
    plt.grid(True)
    plt.show()

    # Determine if results are OK based on thresholds
    determine_if_results_are_ok(asymmetry_results, healthy_thresholds)

def main():
    # Load two different CSV files: one for healthy data and one for the test
    healthy_data = pd.read_csv("/content/gdrive/MyDrive/Colab Notebooks/NNR/Data/michael_20240918_1530.csv")
    test_data = pd.read_csv("/content/gdrive/MyDrive/Colab Notebooks/NNR/Data/michael pd_20240918_1906.csv")

    # Calculate thresholds based on healthy data
    healthy_thresholds = calculate_healthy_threshold(healthy_data)

    # Plot and analyze the test data
    plot_asymmetry_over_time(test_data, healthy_thresholds)

if __name__ == "__main__":
    main()